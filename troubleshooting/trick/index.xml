<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>排错技巧 on Kubernetes 实践指南</title>
    <link>https://k8s.imroc.io/troubleshooting/trick/</link>
    <description>Recent content in 排错技巧 on Kubernetes 实践指南</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 12 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://k8s.imroc.io/troubleshooting/trick/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>分析 ExitCode 定位 Pod 异常退出原因</title>
      <link>https://k8s.imroc.io/troubleshooting/trick/analysis-exitcode/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://k8s.imroc.io/troubleshooting/trick/analysis-exitcode/</guid>
      <description>使用 kubectl describe pod &amp;lt;pod name&amp;gt; 查看异常 pod 的状态:
Containers: kubedns: Container ID: docker://5fb8adf9ee62afc6d3f6f3d9590041818750b392dff015d7091eaaf99cf1c945 Image: ccr.ccs.tencentyun.com/library/kubedns-amd64:1.14.4 Image ID: docker-pullable://ccr.ccs.tencentyun.com/library/kubedns-amd64@sha256:40790881bbe9ef4ae4ff7fe8b892498eecb7fe6dcc22661402f271e03f7de344 Ports: 10053/UDP, 10053/TCP, 10055/TCP Host Ports: 0/UDP, 0/TCP, 0/TCP Args: --domain=cluster.local. --dns-port=10053 --config-dir=/kube-dns-config --v=2 State: Running Started: Tue, 27 Aug 2019 10:58:49 +0800 Last State: Terminated Reason: Error Exit Code: 255 Started: Tue, 27 Aug 2019 10:40:42 +0800 Finished: Tue, 27 Aug 2019 10:58:27 +0800 Ready: True Restart Count: 1 在容器列表里看 Last State 字段，其中 ExitCode 即程序上次退出时的状态码，如果不为 0，表示异常退出，我们可以分析下原因。</description>
    </item>
    
    <item>
      <title>使用 Systemtap 定位疑难杂症</title>
      <link>https://k8s.imroc.io/troubleshooting/trick/use-systemtap-to-locate-problems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s.imroc.io/troubleshooting/trick/use-systemtap-to-locate-problems/</guid>
      <description>安装 Ubuntu 安装 systemtap:
apt install -y systemtap 运行 stap-prep 检查还有什么需要安装:
$ stap-prep Please install linux-headers-4.4.0-104-generic You need package linux-image-4.4.0-104-generic-dbgsym but it does not seem to be available Ubuntu -dbgsym packages are typically in a separate repository Follow https://wiki.ubuntu.com/DebuggingProgramCrash to add this repository apt install -y linux-headers-4.4.0-104-generic 提示需要 dbgsym 包但当前已有软件源中并不包含，需要使用第三方软件源安装，下面是 dbgsym 安装方法(参考官方wiki: https://wiki.ubuntu.com/Kernel/Systemtap):
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C8CAB6595FDFF622 codename=$(lsb_release -c | awk &amp;#39;{print $2}&amp;#39;) sudo tee /etc/apt/sources.list.d/ddebs.list &amp;lt;&amp;lt; EOF deb http://ddebs.</description>
    </item>
    
    <item>
      <title>容器内抓包定位网络问题</title>
      <link>https://k8s.imroc.io/troubleshooting/trick/capture-packets-in-container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s.imroc.io/troubleshooting/trick/capture-packets-in-container/</guid>
      <description>在使用 kubernetes 跑应用的时候，可能会遇到一些网络问题，比较常见的是服务端无响应(超时)或回包内容不正常，如果没找出各种配置上有问题，这时我们需要确认数据包到底有没有最终被路由到容器里，或者报文到达容器的内容和出容器的内容符不符合预期，通过分析报文可以进一步缩小问题范围。那么如何在容器内抓包呢？本文提供实用的脚本一键进入容器网络命名空间(netns)，使用宿主机上的tcpdump进行抓包。
使用脚本一键进入 pod netns 抓包  发现某个服务不通，最好将其副本数调为1，并找到这个副本 pod 所在节点和 pod 名称  kubectl get pod -o wide  登录 pod 所在节点，将如下脚本粘贴到 shell (注册函数到当前登录的 shell，我们后面用)  function e() { set -eu ns=${2-&amp;#34;default&amp;#34;} pod=`kubectl -n $ns describe pod $1 | grep -A10 &amp;#34;^Containers:&amp;#34; | grep -Eo &amp;#39;docker://.*$&amp;#39; | head -n 1 | sed &amp;#39;s/docker:\/\/\(.*\)$/\1/&amp;#39;` pid=`docker inspect -f {{.State.Pid}} $pod` echo &amp;#34;entering pod netns for $ns/$1&amp;#34; cmd=&amp;#34;nsenter -n --target $pid&amp;#34; echo $cmd $cmd }  一键进入 pod 所在的 netns，格式：e POD_NAME NAMESPACE，示例：  e istio-galley-58c7c7c646-m6568 istio-system e proxy-5546768954-9rxg6 # 省略 NAMESPACE 默认为 default  这时已经进入 pod 的 netns，可以执行宿主机上的 ip a 或 ifconfig 来查看容器的网卡，执行 netstat -tunlp 查看当前容器监听了哪些端口，再通过 tcpdump 抓包：  tcpdump -i eth0 -w test.</description>
    </item>
    
  </channel>
</rss>